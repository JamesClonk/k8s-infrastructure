#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("_ytt.lib.yml", "labels")

#@ if data.values.monitoring.enable_network_policy:
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-node-exporter
  namespace: prometheus
  labels: #@ labels("node-exporter")
spec:
  podSelector:
    matchLabels:
      component: node-exporter
      app: prometheus
      release: prometheus
  ingress:
  - from: #! allow ingress traffic from prometheus server to node-exporter
    - podSelector:
        matchLabels:
          component: server
          app: prometheus
          release: prometheus
  - ports:
    - port: 9100

#@overlay/match by=overlay.subset({"kind": "NetworkPolicy", "metadata":{"name":"prometheus-server"}}), expects=1
---
spec:
  #@overlay/replace, expects=1
  ingress:
  - from: #! allow ingress traffic from all prometheus components
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: prometheus
      podSelector: {}
    ports:
    - port: 9090
  - from: #! allow access for grafana
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: grafana
      podSelector: {}
    ports:
    - port: 9090
  - from: #! allow access for ingress-controller
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: ingress-nginx
      podSelector: {}
    ports:
    - port: 9090

#@overlay/match by=overlay.subset({"kind": "NetworkPolicy", "metadata":{"name":"prometheus-alertmanager"}}), expects=1
---
spec:
  #@overlay/replace, expects=1
  ingress:
  - from: #! allow ingress traffic from all prometheus components
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: prometheus
      podSelector: {}
    ports:
    - port: 9093
  - from: #! allow access for ingress-controller
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: ingress-nginx
      podSelector: {}
    ports:
    - port: 9093
#@ end
