#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")

#@ if len(data.values.secrets.postgres.password) == 0 or data.values.secrets.postgres.password == "password":
#@  assert.fail("secrets.postgres.password is missing or invalid")
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  namespace: postgres
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: #@ data.values.secrets.postgres.password
  PGDATA: /var/lib/postgresql/data/pgdata
  DB_HOST: "127.0.0.1"
  DB_PORT: "6432"
  DB_USER: postgres
  DB_PASSWORD: #@ data.values.secrets.postgres.password

#@ if data.values.pgbackup.enabled:
#@ if data.values.configuration.postgres.backup.s3.enabled:
#@ if len(data.values.pgbackup.file_retention) == 0:
#@  assert.fail("pgbackup.file_retention is missing")
#@ end
#@ if len(data.values.secrets.postgres.backup.s3.access_key_id) == 0 or data.values.secrets.postgres.backup.s3.access_key_id == "access_key":
#@  assert.fail("secrets.postgres.backup.s3.access_key_id is missing or invalid")
#@ end
#@ if len(data.values.secrets.postgres.backup.s3.secret_access_key) == 0 or data.values.secrets.postgres.backup.s3.secret_access_key == "secret_key":
#@  assert.fail("secrets.postgres.backup.s3.secret_access_key is missing or invalid")
#@ end
#@ if len(data.values.secrets.postgres.backup.s3.endpoint) == 0 or data.values.secrets.postgres.backup.s3.endpoint == "http://example/deadbeef":
#@  assert.fail("secrets.postgres.backup.s3.endpoint is missing or invalid")
#@ end
#@ if len(data.values.secrets.postgres.backup.s3.bucket) == 0 or data.values.secrets.postgres.backup.s3.bucket == "bucketname":
#@  assert.fail("secrets.postgres.backup.s3.bucket is missing or invalid")
#@ end
#@ if len(data.values.configuration.postgres.backup.s3.retention_days) == 0:
#@  assert.fail("configuration.postgres.backup.s3.retention_days is missing")
#@ end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: pgbackup
  namespace: postgres
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  PGHOST: postgres.postgres.svc.cluster.local
  PGPORT: "5432"
  PGUSER: postgres
  PGPASSWORD: #@ data.values.secrets.postgres.password
  PGDUMPPATH: /data/pgbackup
  FILE_RETENTION: #@ data.values.pgbackup.file_retention
  S3_ACCESS_KEY: #@ data.values.secrets.postgres.backup.s3.access_key_id
  S3_SECRET_KEY: #@ data.values.secrets.postgres.backup.s3.secret_access_key
  S3_ENDPOINT: #@ data.values.secrets.postgres.backup.s3.endpoint
  S3_BUCKET: #@ data.values.secrets.postgres.backup.s3.bucket
  S3_RETENTION: #@ data.values.configuration.postgres.backup.s3.retention_days
  S3_UPLOAD_ENABLED: #@ data.values.configuration.postgres.backup.s3.enabled
#@ end
