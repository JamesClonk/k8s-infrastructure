#@ load("@ytt:data", "data")
#@ load("_ytt.lib.yml", "labels", "resources", "shared_memory")

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: postgres
  labels: #@ labels("database")
spec:
  serviceName: postgres-headless
  selector:
    matchLabels: #@ labels("database")
  replicas: 1
  revisionHistoryLimit: 5
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      labels: #@ labels("database")
    spec:
      serviceAccountName: postgres
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: #@ data.values.postgres.image
        securityContext:
          runAsUser: 999
          privileged: false
          allowPrivilegeEscalation: false
        ports:
        - containerPort: 6432
        args:
        - -c
        - #@ "shared_buffers={}MB".format(shared_memory())
        - -c
        - shared_preload_libraries=pg_stat_statements
        - -c
        - pg_stat_statements.track=all
        - -p
        - "6432"
        envFrom:
        - secretRef:
            name: postgres
        resources: #@ resources(125, data.values.postgres.memory_in_mb)
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 6432
          failureThreshold: 5
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 6432
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /var/lib/postgresql/data
          name: data
        - name: config
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init.sql
      - name: pgbouncer
        image: #@ data.values.pgbouncer.image
        securityContext:
          runAsUser: 70
          runAsGroup: 70
          fsGroup: 70
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
        ports:
        - containerPort: 5432
        env:
        - name: POOL_MODE
          value: session
        - name: SERVER_RESET_QUERY
          value: DISCARD ALL
        envFrom:
        - secretRef:
            name: postgres
        resources:
          requests:
            cpu: 150m
            memory: 32Mi
          limits:
            cpu: 500m
            memory: 64Mi
        readinessProbe:
          tcpSocket:
            port: 5432
          failureThreshold: 5
          initialDelaySeconds: 15
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 5432
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec: #! allow existing queries / clients to complete within 120 seconds
              command: [ "/bin/sh", "-c", "killall -INT pgbouncer && sleep 120" ]
        volumeMounts:
        - name: config
          mountPath: /etc/pgbouncer/pgbouncer.ini
          subPath: pgbouncer.ini
      - name: metrics
        image: #@ data.values.exporter.image
        securityContext:
          runAsUser: 20001
          privileged: false
          allowPrivilegeEscalation: false
        ports:
        - containerPort: 9187
        args:
        - --auto-discover-databases
        - --extend.query-path=/etc/queries.yml
        env:
        - name: DATA_SOURCE_URI
          value: 127.0.0.1:6432/postgres?sslmode=disable
        - name: DATA_SOURCE_PASS
          valueFrom:
            secretKeyRef:
              name: postgres
              key: POSTGRES_PASSWORD
        - name: DATA_SOURCE_USER
          valueFrom:
            secretKeyRef:
              name: postgres
              key: POSTGRES_USER
        resources:
          requests:
            cpu: 50m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 64Mi
        readinessProbe:
          httpGet:
            path: /
            port: 9187
        livenessProbe:
          httpGet:
            path: /
            port: 9187
        volumeMounts:
        - name: config
          mountPath: /etc/queries.yml
          subPath: queries.yml
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: postgres
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: #@ "{}Mi".format(shared_memory())
      - name: data
        persistentVolumeClaim:
          claimName: postgres
