#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")

#@ if len(data.values.secrets.lets_encrypt.staging_key) > 0 and data.values.secrets.lets_encrypt.staging_key != "none":
---
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-staging
  namespace: cert-manager
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: cert-manager
  annotations:
    kapp.k14s.io/change-group.letsencrypt-staging: secret
    kapp.k14s.io/change-rule.letsencrypt: upsert after upserting deployments
type: Opaque
data:
  tls.key: #@ data.values.secrets.lets_encrypt.staging_key
#@ end

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  namespace: cert-manager
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: cert-manager
  annotations:
    kapp.k14s.io/change-group.letsencrypt-staging: clusterissuer
    kapp.k14s.io/change-rule.letsencrypt-staging: upsert after upserting secret
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    #@ if len(data.values.secrets.lets_encrypt.email) == 0 or data.values.secrets.lets_encrypt.email == "nobody@nobody":
    #@  assert.fail("secrets.lets_encrypt.email is missing or invalid")
    #@ end
    email: #@ data.values.secrets.lets_encrypt.email
    #@ if/end len(data.values.secrets.lets_encrypt.staging_key) > 0 and data.values.secrets.lets_encrypt.staging_key != "none":
    disableAccountKeyGeneration: true
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
